# {{ managed_message }}
---
name: {{ ci_name }}

on:
  push:

jobs:
  tests:
    name: "{{ ci_platform }} / Python ${{ brace('matrix.config.python-version')}}"
    runs-on: "{{ ci_platform }}"
    continue-on-error: ${{ brace('matrix.config.experimental') }}
    env:
      USING_COVERAGE: '{{ ",".join(no_dev_versions(python_versions)) }}'

    strategy:
      fail-fast: False
      matrix:
        config:{% for version in no_dev_versions(python_versions) %}
          - {python-version: "{{ version }}", testenvs: "{{ gh_actions_versions[version] }}", experimental: {{ "alpha" in version or "beta" in version or version == "pypy-3.7"}}}{% endfor %}

    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ brace('matrix.config.python-version')}}"

      - name: Install dependencies 🔧
        run: |
          {% for line in dependency_lines %}{{ line }}
          {% endfor %}
      - name: "Run Tests for Python ${{ brace('matrix.config.python-version')}}"
        run: python -m tox -e "${{ brace('matrix.config.testenvs') }}"
{% if enable_tests and not stubs_package %}
      - name: "Upload Coverage 🚀"
        uses: actions/upload-artifact@v2
        {{ "if: ${{ always() }} "}}
        with:
          name: "coverage-${{ brace('matrix.config.python-version')}}"
          path: .coverage{% endif %}
{% if ci_name == "Linux" %}{% if enable_tests and not stubs_package %}

  Coverage:
    needs: tests
    runs-on: "{{ ci_platform }}"
    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        with:
          python-version: 3.8

      - name: Install dependencies 🔧
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade "coveralls>=3.0.0" coverage_pyver_pragma

      - name: "Download Coverage 🪂"
        uses: actions/download-artifact@v2
        with:
          path: coverage

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: coverage

      - name: Combine Coverage 👷
        run: |
          shopt -s globstar
          python -m coverage combine coverage/**/.coverage

      - name: "Upload Combined Coverage Artefact 🚀"
        uses: actions/upload-artifact@v2
        with:
          name: "combined-coverage"
          path: .coverage

      - name: "Upload Combined Coverage to Coveralls"
        env:
          GITHUB_TOKEN: ${{ "{{" }} secrets.GITHUB_TOKEN {{ "}}" }}
        run: |
          coveralls --service=github{% endif %}{% if on_pypi %}

  Deploy:
    needs: tests

    runs-on: "{{ ci_platform }}"
    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"
        if: startsWith(github.ref, 'refs/tags/')

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        with:
          python-version: 3.8
        if: startsWith(github.ref, 'refs/tags/')

      - name: Install dependencies 🔧
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade tox
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build distributions 📦
        run: |
          tox -e build
          {% if not pure_python %}rm -rf dist/*.whl{% endif %}
        if: startsWith(github.ref, 'refs/tags/')

      - name: Upload distribution to PyPI 🚀
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ "{{" }} secrets.PYPI_TOKEN {{ "}}" }}
          skip_existing: true

{% if enable_conda %}

  Conda:
    needs: deploy
    runs-on: "{{ ci_platform }}"
    if: startsWith(github.ref, 'refs/tags/') || (startsWith(github.event.head_commit.message, 'Bump version') != true)
    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        with:
          python-version: 3.8

      - name: Install dependencies 🔧
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade repo_helper

          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda

      - name: Build Conda 📦
        run: |
          chmod +x .github/actions_build_conda.sh
          bash .github/actions_build_conda.sh

      - name: Deploy Conda 🚀
        run: |
          chmod +x .github/actions_deploy_conda.sh
          bash .github/actions_deploy_conda.sh
        env:
          ANACONDA_TOKEN: ${{ "{{" }} secrets.ANACONDA_TOKEN {{ "}}" }}{% endif %}

{% endif %}
{% endif %}

{# TODO: perhaps merge mypy into this workflow,  so that releases depend on it? #}
