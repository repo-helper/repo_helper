# {{ managed_message }}
---
name: {{ ci_name }}

on:
  push:
    branches-ignore:
      - 'repo-helper-update'
      - 'pre-commit-ci-update-config'
      - 'imgbot'
{{ run_on_tags|default("") }}
  pull_request:

permissions:
  actions: write
  issues: write
  contents: read

jobs:
  tests:
    name: "{{ ci_platform }} / Python ${{ brace('matrix.config.python-version')}}"
    runs-on: "{{ ci_platform }}"
    continue-on-error: ${{ brace('matrix.config.experimental') }}
    env:
      USING_COVERAGE: '{{ ",".join(no_dev_versions(python_versions)) }}'

    strategy:
      fail-fast: False
      matrix:
        config:{% for version in no_dev_versions(python_versions) %}
          {%- set testenvs, experimental = gh_actions_versions[version] %}
          - {python-version: "{{ version }}", testenvs: "{{ testenvs }}", experimental: {{ experimental }}}{% endfor %}

    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"

      - name: Check for changed files
        if: startsWith(github.ref, 'refs/tags/') != true
        uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: "json"
          filters: |
            code:
              - '{{ code_file_filter }}'

      - name: Setup Python 🐍
        id: setup-python
        if: ${{ brace("steps.changes.outputs.code == 'true' || steps.changes.outcome == 'skipped'") }}
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ brace('matrix.config.python-version')}}"

      - name: Install dependencies 🔧
        if: steps.setup-python.outcome == 'success'
        run: |
          {% for line in dependency_lines %}{{ line }}
          {% endfor %}
      - name: "Run Tests for Python ${{ brace('matrix.config.python-version')}}"
        if: steps.setup-python.outcome == 'success'
        run: python -m tox -e "${{ brace('matrix.config.testenvs') }}" -s false
{% if enable_tests and not stubs_package %}
      - name: "Upload Coverage 🚀"
        uses: actions/upload-artifact@v2
        if: ${{ brace("always() && steps.setup-python.outcome == 'success'") }}
        with:
          name: "coverage-${{ brace('matrix.config.python-version')}}"
          path: .coverage{% endif %}
{% if ci_name == "Linux" %}{% if enable_tests and not stubs_package %}

  Coverage:
    needs: tests
    runs-on: "{{ ci_platform }}"
    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        with:
          python-version: 3.8

      - name: Install dependencies 🔧
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade "coveralls>=3.0.0" coverage_pyver_pragma

      - name: "Download Coverage 🪂"
        uses: actions/download-artifact@v2
        with:
          path: coverage

      - name: Display structure of downloaded files
        id: show
        run: ls -R
        working-directory: coverage
        continue-on-error: true

      - name: Combine Coverage 👷
        if: ${{ brace("steps.show.outcome != 'failure'") }}
        run: |
          shopt -s globstar
          python -m coverage combine coverage/**/.coverage

      - name: "Upload Combined Coverage Artefact 🚀"
        if: ${{ brace("steps.show.outcome != 'failure'") }}
        uses: actions/upload-artifact@v2
        with:
          name: "combined-coverage"
          path: .coverage

      - name: "Upload Combined Coverage to Coveralls"
        if: ${{ brace("steps.show.outcome != 'failure'") }}
        env:
          GITHUB_TOKEN: ${{ brace("secrets.GITHUB_TOKEN") }}
        run: |
          coveralls --service=github{% endif %}{% if on_pypi %}

  Deploy:
    needs: tests

    runs-on: "{{ ci_platform }}"
    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"
        if: startsWith(github.ref, 'refs/tags/')

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        if: startsWith(github.ref, 'refs/tags/')
        with:
          python-version: 3.8

      - name: Install dependencies 🔧
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade tox

      - name: Build distributions 📦
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          tox -e build
          {% if not pure_python %}rm -rf dist/*.whl{% endif %}

      - name: Upload distribution to PyPI 🚀
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ "{{" }} secrets.PYPI_TOKEN {{ "}}" }}
          skip_existing: true

      - name: Close milestone 🚪
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          python -m pip install --upgrade github3.py packaging
          python .github/milestones.py
        env:
          GITHUB_TOKEN: ${{ "{{" }} secrets.GITHUB_TOKEN {{ "}}" }}


{% if enable_conda %}
  Conda:
    needs: deploy
    runs-on: "ubuntu-18.04"
    if: startsWith(github.ref, 'refs/tags/') || (startsWith(github.event.head_commit.message, 'Bump version') != true)
    steps:
      - name: Checkout 🛎️
        uses: "actions/checkout@v2"

      - name: Setup Python 🐍
        uses: "actions/setup-python@v2"
        with:
          python-version: 3.8

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: env
          conda-build-version: 3.21.0

      - name: Install dependencies 🔧
        run: |
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade "{{ '" "'.join(conda_pip_dependencies) }}"
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          $CONDA/bin/conda config --set always_yes yes --set changeps1 no
          $CONDA/bin/conda update -n base conda
          $CONDA/bin/conda info -a
          {% for channel in conda_channels %}$CONDA/bin/conda config --add channels {{ channel }}
          {% endfor %}
          $CONDA/bin/conda config --remove channels defaults

      - name: Build Conda Package 📦
        run: |
          python -m mkrecipe --type wheel || exit 1
          $CONDA/bin/conda build conda -c conda-forge -c domdfcoding --output-folder conda/dist

      - name: Deploy Conda Package 🚀
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $CONDA/bin/conda config --set always_yes yes --set changeps1 no
          $CONDA/bin/conda install anaconda-client
          $CONDA/bin/conda info -a

          for f in conda/dist/noarch/{{ pypi_name.lower() }}-*.tar.bz2; do
            [ -e "$f" ] || continue
            echo "$f"
            conda install "$f" || exit 1
            echo "Deploying to Anaconda.org..."
            $CONDA/bin/anaconda -t "$ANACONDA_TOKEN" upload "$f" || exit 1
            echo "Successfully deployed to Anaconda.org."
          done
        env:
          ANACONDA_TOKEN: ${{ "{{" }} secrets.ANACONDA_TOKEN {{ "}}" }}{% endif %}

{% endif %}
{% endif %}

{# TODO: perhaps merge mypy into this workflow,  so that releases depend on it? #}
